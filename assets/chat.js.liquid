// Initialize Firebase
var config = {
	apiKey: "AIzaSyD_gFg9x6syTwlZU5bANFmvypxGZPYvvgk",
	authDomain: "shopify-chat.firebaseapp.com",
	databaseURL: "https://shopify-chat.firebaseio.com",
	storageBucket: "shopify-chat.appspot.com",
	messagingSenderId: "1073663351509"
};
firebase.initializeApp(config);

// Initializes FriendlyChat.
function FriendlyChat() {
	this.checkSetup();

	// Shortcuts to DOM Elements.
	this.messageList = document.getElementById('messages');
	this.messageForm = document.getElementById('message-form');
	this.messageInput = document.getElementById('message');
	this.submitButton = document.getElementById('submit');
	this.userName = document.getElementById('user-name');
	this.signInButton = document.getElementById('sign-in');
	// this.signOutButton = document.getElementById('sign-out');
	// this.signInSnackbar = document.getElementById('must-signin-snackbar');

	// Saves message on form submit.
	this.messageForm.addEventListener('submit', this.saveMessage.bind(this));
	// this.signOutButton.addEventListener('click', this.signOut.bind(this));
	this.signInButton.addEventListener('click', this.signIn.bind(this));

	// Toggle for the button.
	var buttonTogglingHandler = this.toggleButton.bind(this);
	this.messageInput.addEventListener('keyup', buttonTogglingHandler);
	this.messageInput.addEventListener('change', buttonTogglingHandler);

	this.initFirebase();

	firebase.auth().signInAnonymously().catch(function(error) {
		// Handle Errors here.
		var errorCode = error.code;
		var errorMessage = error.message;

	});
}

// Sets up shortcuts to Firebase features and initiate firebase auth.
FriendlyChat.prototype.initFirebase = function() {
	// Initialize Firebase.
	this.auth = firebase.auth();
	this.database = firebase.database();
	this.serverValue = firebase.serverValue;
	// Initiates Firebase auth and listen to auth state changes
	this.auth.onAuthStateChanged(this.onAuthStateChanged.bind(this));
};

// Loads chat messages history and listens for upcoming ones.
FriendlyChat.prototype.loadMessages = function() {
	// Load and listens for new messages.
	this.messageRef = this.database.ref('messages');
	// Make sure that we turn off all other listeners
	this.messageRef.off();

	// Load the last 20 messages and listen to new ones
	var setMessage = function(data) {
		var val = data.val();
		this.displayMessage(data.key,val.name,val.time,val.text,val.admin);
	}.bind(this);

	this.messageRef.limitToLast(20).on("child_added", setMessage);
	this.messageRef.limitToLast(20).on("child_changed", setMessage);
};

// Saves a new message on the Firebase DB.
FriendlyChat.prototype.saveMessage = function(e) {
	e.preventDefault();
	// Check that the user entered a message and is signed in.
	if (this.messageInput.value) {

		// push new message to Firebase.
		var currentUser = this.auth.currentUser;

		// Adds a new message to the Firebase Database
		this.messageRef.push({
			name: currentUser.displayName ? currentUser.displayName : '__Anonymous__',
			text: this.messageInput.value,
			time: firebase.database.ServerValue.TIMESTAMP
		}).then(function(){
			// Reset message text field and SEND button state.
			FriendlyChat.resetMaterialTextfield(this.messageInput);
			this.toggleButton();
		}.bind(this)).catch(function(error){
			console.error('Error writing new message to Firebase Database', error);
		});
	}
};


// Signs-in Friendly Chat.
FriendlyChat.prototype.signIn = function(event) {
    event.stopPropagation();    
    event.preventDefault();
	// Sign in Firebase with credential from the Google user.
	var provider = new firebase.auth.GoogleAuthProvider();
	this.auth.signInWithPopup(provider);
};

// Signs-out of Friendly Chat.
FriendlyChat.prototype.signOut = function() {
	// Sign out of Firebase.
	this.auth.signOut();
};

// Triggers when the auth state change for instance when the user signs-in or signs-out.
FriendlyChat.prototype.onAuthStateChanged = function(user) {

	var userName = user.displayName; // Get user's name.

	if(user.isAnonymous) {
		this.auth.currentUser.displayName = 
		userName = "Anonymous";
	}

	// Set the user's name.
	this.userName.textContent = userName;
	this.userName.removeAttribute('hidden');

	// We load currently existing chant messages.
	this.loadMessages();
  
    if(current.pageType == 'product'){
      
      this.messageRef.push({
        name: this.auth.currentUser.displayName ? currentUser.displayName : '__Anonymous__',
        text: " is browsing <a href='/products/" + current.product.handle + "'>" + current.product.title + "</a>",
        time: firebase.database.ServerValue.TIMESTAMP
      }).then(function(){
        // Reset message text field and SEND button state.
        FriendlyChat.resetMaterialTextfield(this.messageInput);
        this.toggleButton();
      }.bind(this)).catch(function(error){
        console.error('Error writing new message to Firebase Database', error);
      });
    }
};

// Resets the given MaterialTextField.
FriendlyChat.resetMaterialTextfield = function(element) {
	element.value = '';
	element.parentNode.MaterialTextfield.boundUpdateClassesHandler();
};

// Template for messages.
FriendlyChat.MESSAGE_TEMPLATE =
		'<div class="message-container">' +
			'<div class="name"></div>' +
			'<div class="message"></div>' +
		'</div>';

// Displays a Message in the UI.
FriendlyChat.prototype.displayMessage = function(key, name, time, text, admin) {
	var div = document.getElementById(key);
	// If an element for that message does not exists yet we create it.
	if (!div) {
		var container = document.createElement('div');
		container.innerHTML = FriendlyChat.MESSAGE_TEMPLATE;
		div = container.firstChild;
		div.setAttribute('id', key);
		this.messageList.appendChild(div);
	}

	var formattedTime = "";
	if (time) {
		var date = new Date(time*1000);
		var hours = date.getHours();
		var minutes = "0" + date.getMinutes();
		formattedTime = hours + ':' + minutes.substr(-2);
	} 

	var nameDiv = div.querySelector('.name');
	if(name != "__Anonymous__")
		nameDiv.textContent = "@" + name.replace(/ /g,'');// + ":" + " " + formattedTime;
	else {
		nameDiv.textContent = "Someone";// + " " + formattedTime;
		nameDiv.className += " anonymous";
	}

	if(admin) div.querySelector('.name').className += " mod";

	var messageElement = div.querySelector('.message');
	if (text) { // If the message is text.
		messageElement.innerHTML = text;
		// Replace all line breaks by <br>.
		messageElement.innerHTML = messageElement.innerHTML.replace(/\n/g, '<br>');
	}

	// Show the card fading-in.
	setTimeout(function() {div.classList.add('visible')}, 1);
	this.messageList.scrollTop = this.messageList.scrollHeight;
	this.messageInput.focus();
};

// Enables or disables the submit button depending on the values of the input
// fields.
FriendlyChat.prototype.toggleButton = function() {
	if (this.messageInput.value) {
		this.submitButton.removeAttribute('disabled');
	} else {
		this.submitButton.setAttribute('disabled', 'true');
	}
};

// Checks that the Firebase SDK has been correctly setup and configured.
FriendlyChat.prototype.checkSetup = function() {
	if (!window.firebase || !(firebase.app instanceof Function) || !window.config) {
		window.alert('You have not configured and imported the Firebase SDK. ' +
				'Make sure you go through the codelab setup instructions.');
	} else if (config.storageBucket === '') {
		window.alert('Your Firebase Storage bucket has not been enabled. Sorry about that. This is ' +
				'actually a Firebase bug that occurs rarely. ' +
				'Please go and re-generate the Firebase initialisation snippet (step 4 of the codelab) ' +
				'and make sure the storageBucket attribute is not empty. ' +
				'You may also need to visit the Storage tab and paste the name of your bucket which is ' +
				'displayed there.');
	}
};

window.onload = function() {
	window.friendlyChat = new FriendlyChat();
};